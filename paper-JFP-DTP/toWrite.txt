Write on :


- 1) "Type safe reflection" paper
I want to write for 
JFP Special Issue on Dependently typed Programming
  infos here : http://journals.cambridge.org/action/displaySpecialPage?pageId=860
  and here : https://mc.manuscriptcentral.com/jfp_submit
  Submission Deadline: January 11th, 2016
  (Expected Publication Date: Late 2016)

What can be mentionned :

	. 1.1] f : A -> B
      semA : A -> SEM
	  semB : B -> SEM
      lemma of correctness of f : for all a:A, semA a = semB (f a)
      cf model transformations, but not only. This is the case when what really matters is the sense, or the behaviour of an object, and not its structure.
	  This part refers to [3) about content and structure]

	. 1.2] Difference between the propositional equal and the definitionally equal
      Explaning why things syntactically different can be equal.

	. 1.3] Motivating example with binary numbers
	
	. 1.4] Approach followed by Coq : a function and later, a lemma of correctness
	       Add some doubt about the completeness (cf my slides)
	
	. 1.5] Our approach on a simpler problem : reflected terms, writing of the tactic...
	Emphasize on the "type safe reflection" thing : we're guaranteed that :
		- The reflection of a term is a faithful representation of this term, 
		- If we produce a proof, it's going to be a proof of the desired property, 
		- With this representation, we can pull out easily the proof from the index
	
	. 1.6] Our complete approach : reflected terms, hierarchy of tactics, ...
	
	. 1.7] How to reuse code/proofs
	
        
- 2) "Regular expression stuff" paper


- 3) "Content and structure thing" paper.
	Content can be normalised and equality checked automatically, structure can be enforced by dependent types
	This two things are somehow orthogonal
	
- 4) Proving and testing
	Paper for TaP (Tests and Proofs 2016), co located with STAF (Software Technologies: Applications and Foundations), in Vienna, Austria
	* Abstracts: 29 January 2016
    * Papers: 5 February 2016
    (the conference is 5-7 July 2016, Vienna, Austria)
	I want to submit here a Short papers (6pages + biblio)
    
	There's a wrong tendency to think that what is proven is correct according to our *intentions*. In fact, a proof (even when formally checked), is only a guarantee
	according to a *formal specification* (a logical formulae), which can be quite far from capturing what we really want. That means that if we prove our programs to be correct, then we'll still have to do tests, but this time on our predicates.
	We can also capture multiple time the same property, but with different definitions, and show (formally) their equivalence.
	If we go in the direction of testing the previcate (like "isSorted"), then what we can do is :
	- write a decision procedure, l:list A -> Maybe (isSorted l)
	and check that every time it builds a proof for (isSorted l), we effectively had a sorted list l (with our intention).
	formally : if it decides yes and gives a proof -> we need to check that this was what we wanted (ie, the list is sorted for a human)
	
	but that's not enough, because when the function return "Nothing", perhaps their exist a proof which hasn't been found by the decision procedure (imagine a function which always return Nothing).
	At least, we can check that this "nothing" was effectively what we expected for this list. But we also need to make sure that there is no proof of (isSorted l)
	formally : if it decides Nothing -> we need to check that this is what we wanted (ie, the list is not sorted for a human), AND that there is not a hiden proof (because we've only produces a Maybe, not a Dec).
	
	in order to intensively test this, we can write a function which only generates sorted list. It's easy, chose a random number, add it to the list, and continue by picking randomly random number, but only add them if they're greater than the previous one.
	We can let the machine computes a lot of supposedly sorted list, and simply check that they are effectively sorted for a human. (ie, the generator is correct with our intention)
	Now, we can try to make a proof :
	forall size:N, isSorted (generateSortedList n)
	and if we succeed, we now that isSorted really captures our notion of being sorted.
	THat means that we've replaced the uncertainity about "did we write a correct predicate isSorted" which should capture all sorted lists, by the (hopefully weaker) uncertainity about "did we write a correct generator"
	I think that it's easier to generate exemple of what we want to capture, rather than to describe it. That's a nice formulation.
	
	Now, better, with depend types, we can write a type "SortedList". That goes a bit in relation with the 3rd paper.

	
5) Better language for proving and testing (predicates essentially) ?

  - builts in predicates, that should work for various data types (is sorted, contains, ...)
      should work for any datatypes with a certain arity of constructors. recursive equations.
      This is for the STRUCTURE part I think (cf idea 4))
  - automatic way to test new predicates, by generating (syntactically) examples that fulfil the predicate
      predicate on data -> datas
      ex : isSorted -> listes qui sont triÃ©es
  - automatic extraction of programs from specifications. I'm sure that for a certain class of logical formulae, we can construct automatically programs that respect the logical formulae
      predicate on programs -> programs
      
  - dependent types ?
    If so, I want to allow the "rewrite" even if the result gives something which doesn't typecheck.
    Is this safe ?
  