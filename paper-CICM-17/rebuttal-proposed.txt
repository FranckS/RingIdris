We thank the reviewers for their careful reading of the paper and many helpful
comments, which we will incorporate in the final draft. In particular, we are 
sure we can condense the paper according to Jacques' suggestions.

Regarding the choice of structures and normal forms: our hierarchy is not
supposed to deal with more than the most useful algebraic structures which
arise in Idris programming. Coq for example only has a Ring solver but we have
also provers for semigroups, monoids, and groups thanks to the modularity with
which we compute the normal form.  We focus on "pure" algebraic structures that
do not have additional axioms and which do have a normal form.
 
We don't claim that every interesting structure can be treated by one prover of
our hierachy of tactics, although our hierarchy of provers is more general than
the automations available in e.g. Coq or Agda.

On proving properties of normalisation: Things become difficult when we leave
the ground of the "pure" algebraic structures in which we work (semigroups, monoids, 
groups and rings essentially) and move to an arbitrary equivalence relation with 
arbitrary axioms. Such a system can be seen as a rewriting system of deduction 
modulo. Determining if such a rewriting system admits a normal form requires
determining whether the rewriting system is confluent and terminating. Both
questions are difficult to answer in the general case. Currently, systems like
Dedukti (an implementation of lambda-Pi-calculus modulo) can plug to an
auxiliary confluence checker such as CSI^ho or ACPH. That would be an interesting
future work for Idris, as suggested by the first reviewer.

There are indeed many structures which do not have normal norms. But deduction
modulo, although very interesting, was somehow out of scope for our goals. We
initially wanted Idris to be equipped with some automations, which we did in a
modular way which made it easy to implement provers for other structures as well.

It is interesting to note that the study of the properties of a proposed
normalisation function can only be meta-theoretic. Indeed, Gr√©goire and
Mahboubi noticed it for their Ring solver in Coq. However, this does not affect
the correctness of the decision procedure.

The motivating example is an illustration of how these proofs obligations occur
naturally, but there are many other uses.
